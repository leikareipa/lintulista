"use strict";import{error,panic_if_undefined,warn,panic_if_not_type,panic}from"./assert.js";import{Observation}from"./observation.js";import{Bird}from"./bird.js";const httpRequests=Object.freeze({backendURLs:Object.freeze({observations:"./server/api/observations.php",metadata:"./server/api/metadata.php",lists:"./server/api/lists.php"}),send_request:function(a,b={}){return panic_if_not_type("string",a),panic_if_not_type("object",b),fetch(a,b).then(a=>{if(!a.ok)throw a.statusText;return a.json()}).then(a=>{if(!a)return[!1,null];if(!a.valid)throw a.message?a.message:"unknown";return[!0,a.data]}).catch(b=>(error(`Client-to-server query for "${a}" failed. Cause: ${b}`),[!1,null]))},delete_observation:async function(a,b){panic_if_undefined(b,b.unixTimestamp,b.bird);const[c]=await this.send_request(`${this.backendURLs.observations}?list=${a}`,{method:"DELETE",body:JSON.stringify({species:b.bird.species})});return c},get_view_key:async function(a){panic_if_not_type("string",a);const[b,c]=await this.send_request(`${this.backendURLs.lists}?list=${a}`,{method:"GET"});if(b){const a=(()=>{try{return JSON.parse(c)}catch(a){return panic(`Failed to parse a server response. Error: ${a}`),!1}})();return panic_if_not_type("string",a.viewKey),a.viewKey}panic("Failed to fetch the view key from the server.")},get_known_birds_list:async function(){const[a,b]=await this.send_request(`${this.backendURLs.metadata}?type=knownBirds`,{method:"GET"});if(a){const a=(()=>{try{return JSON.parse(b)}catch(a){return panic(`Failed to parse a server response. Error: ${a}`),!1}})();return panic_if_not_type("array",a),a.map(a=>Bird({order:a.order,family:a.family,species:a.species,thumbnailUrl:(()=>Bird.thumbnailFilename[a.species]?"./img/bird-thumbnails/"+Bird.thumbnailFilename[a.species]:null)()}))}return[]},get_backend_limits:async function(){const[a,b]=await this.send_request(`${this.backendURLs.metadata}?type=backendLimits`,{method:"GET"});if(a)try{return JSON.parse(b)}catch(a){return panic(`Failed to parse a server response. Error: ${a}`),!1}else return{}},get_observations:async function(a,b=[]){function c(a){return!!b.map(a=>a.species.toLowerCase()).includes(a.toLowerCase())}panic_if_not_type("string",a),panic_if_not_type("object",b);const[d,e]=await this.send_request(`${this.backendURLs.observations}?list=${a}`,{method:"GET"});if(d){const a=(()=>{try{return JSON.parse(e)}catch(a){return panic(`Failed to parse a server response. Error: ${a}`),!1}})();return panic_if_not_type("array",a),a.filter(a=>!c(a.species)).forEach(a=>{warn(`Unknown bird in the observation list: ${a.species}. Skipping it.`)}),a.filter(a=>c(a.species)).map(a=>Observation({bird:b.find(c=>c.species===a.species),date:new Date(1e3*a.timestamp)}))}return[]},put_observation:async function(a,b){panic_if_not_type("string",a),panic_if_not_type("object",b,b.bird),panic_if_undefined(b.unixTimestamp);const[c]=await this.send_request(`${this.backendURLs.observations}?list=${a}`,{method:"PUT",body:JSON.stringify({species:b.bird.species,timestamp:b.unixTimestamp})});return c},create_new_list:async function(){const[a,b]=await this.send_request(this.backendURLs.lists,{method:"POST"});if(a)try{const a=JSON.parse(b);return"object"==typeof a.keys&&"string"==typeof a.keys.viewKey&&"string"==typeof a.keys.editKey&&a.keys}catch(a){return panic(`Failed to parse a server response. Error: ${a}`),!1}else return!1}});export async function BackendAccess(a){const b=Object.freeze((await httpRequests.get_backend_limits())),c=(()=>!!(15<a.length))(),d=await(async()=>c?httpRequests.get_view_key(a):a)(),e={knownBirds:Object.freeze([]),observations:Object.freeze([]),refresh:async function(){await this.refresh_known_birds(),await this.refresh_observations()},refresh_known_birds:async function(){this.knownBirds=await httpRequests.get_known_birds_list()},refresh_observations:async function(){this.observations=await httpRequests.get_observations(a,this.knownBirds)}};await e.refresh();return{hasEditRights:c,viewKey:d,known_birds:()=>e.knownBirds,observations:()=>e.observations,backend_limits:()=>b,refresh_observation_cache:async()=>{await e.refresh_observations()},delete_observation:async b=>{panic_if_not_type("string",a),panic_if_not_type("object",b);const c=e.observations.findIndex(a=>a.bird.species===b.bird.species);if(-1===c)return error("Can't delete an unknown observation."),!1;const d=await httpRequests.delete_observation(a,b);return d?(e.observations.splice(c,1),!0):(error("Failed to delete an observation."),!1)},put_observation:async b=>{panic_if_undefined(b,b.bird,b.unixTimestamp);const c=e.observations.findIndex(a=>a.bird.species===b.bird.species),d=await httpRequests.put_observation(a,b);return d?(e.observations.splice(c,-1!==c,b),!0):(error("Failed to POST an observation."),!1)}}}BackendAccess.create_new_list=()=>httpRequests.create_new_list(),BackendAccess.get_known_birds_list=()=>httpRequests.get_known_birds_list();