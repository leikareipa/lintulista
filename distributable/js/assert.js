"use strict";import{darken_viewport}from"./darken_viewport.js";export function panic(a=""){throw darken_viewport({opacity:1,z:1e3}),alert(`Lintulista is in a panic: ${a}`),Error(`Lintulista is in a panic: ${a}`)}export function panic_if_undefined(...a){a.forEach(a=>{is_defined(a)||panic("A required property is undefined.")})}export function panic_if_not_type(a,...b){b.forEach(b=>{const c=(()=>"array"===a?Array.isArray(b):typeof b===a)();c||panic(`A property is of the wrong type; expected "${a}".`)})}export function is_function(a){return"function"==typeof a}export function is_defined(a){return"undefined"!=typeof a}export function error(a=""){console.error(`Lintulista: ${a}`),alert(`Lintulista: ${a}`)}export function warn(a=""){console.warn(`Lintulista: ${a}`)}export function debug(a=""){console.debug(`Lintulista: ${a}`)}export function expect_true(a=[]){panic_if_not_type("array",a);const b=a.map((a,b)=>({run:a,idx:b})).filter(a=>!0!==a.run());return b.length&&console.error(...["Not strictly true:\n",...b.map(a=>`#${a.idx+1}: ${a.run.toString()}\n`)]),!b.length}export function throw_if_not_true(a=[]){if(panic_if_not_type("array",a),!expect_true(a))throw"assertion failure"}