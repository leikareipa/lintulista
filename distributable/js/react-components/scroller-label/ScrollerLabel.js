"use strict";import{panic_if_undefined,panic_if_not_type,error,warn,panic,throw_if_not_true}from"../../assert.js";import{Scroller}from"./Scroller.js";export function ScrollerLabel(a={}){function b(b=1){f=f+b<a.min?a.max:f+b>a.max?a.min:f+b,e(f)}function c(a=0){return["tammikuu","helmikuu","maaliskuu","huhtikuu","toukokuu","kes\xE4kuu","hein\xE4kuu","elokuu","syyskuu","lokakuu","marraskuu","joulukuu"][a%12]}ScrollerLabel.validate_props(a);const[d,e]=React.useState(a.value);let f=d;return React.useEffect(()=>(a.onChange(d),()=>a.onChange(d)),[d]),React.createElement("div",{className:"ScrollerLabel"},React.createElement(Scroller,{icon:"fas fa-caret-up fa-2x",additionalClassName:"up",callback:()=>b(1)}),React.createElement("div",{className:"value"},`${function(){switch(a.type){case"integer":return d;case"month-name":return c(d-1,a.language);default:return error("Unknown value type."),"?";}}()}${a.suffix||""}`),React.createElement(Scroller,{icon:"fas fa-caret-down fa-2x",additionalClassName:"down",callback:()=>b(-1)}))}ScrollerLabel.validate_props=function(a){return panic_if_undefined(a.type,a.min,a.max),panic_if_not_type("number",a.min,a.max,a.value),void(a.onChange?"function"!=typeof a.onChange&&panic("Expected the onChange property to be a function."):warn("No onChange callback function passed to this scroller label."))},ScrollerLabel.test=()=>{let a={remove:()=>{}};try{a=document.createElement("div"),document.body.appendChild(a),ReactTestUtils.act(()=>{const b=React.createElement(ScrollerLabel,{type:"month-name",value:3,min:1,max:12,suffix:"ta",onChange:()=>{}});ReactDOM.unmountComponentAtNode(a),ReactDOM.render(b,a)}),throw_if_not_true([()=>"maaliskuuta"===a.textContent]);const b=a.querySelector(".Scroller.up"),c=a.querySelector(".Scroller.down");throw_if_not_true([()=>null!==b,()=>null!==c]),ReactTestUtils.Simulate.mouseDown(b),ReactTestUtils.Simulate.mouseUp(b),throw_if_not_true([()=>"huhtikuuta"===a.textContent]),ReactTestUtils.Simulate.mouseDown(c),ReactTestUtils.Simulate.mouseUp(c),ReactTestUtils.Simulate.mouseDown(c),ReactTestUtils.Simulate.mouseUp(c),throw_if_not_true([()=>"helmikuuta"===a.textContent]),ReactTestUtils.Simulate.mouseDown(c),ReactTestUtils.Simulate.mouseUp(c),ReactTestUtils.Simulate.mouseDown(c),ReactTestUtils.Simulate.mouseUp(c),throw_if_not_true([()=>"joulukuuta"===a.textContent]),ReactTestUtils.Simulate.mouseDown(b),ReactTestUtils.Simulate.mouseUp(b),throw_if_not_true([()=>"tammikuuta"===a.textContent]),throw_if_not_true([()=>"tammikuuta"===a.textContent]),ReactTestUtils.Simulate.mouseDown(b),ReactTestUtils.Simulate.mouseUp(b),throw_if_not_true([()=>"helmikuuta"===a.textContent]),ReactTestUtils.Simulate.mouseDown(b),ReactTestUtils.Simulate.mouseUp(b),throw_if_not_true([()=>"maaliskuuta"===a.textContent]),ReactTestUtils.Simulate.mouseDown(b),ReactTestUtils.Simulate.mouseUp(b),throw_if_not_true([()=>"huhtikuuta"===a.textContent]),ReactTestUtils.Simulate.mouseDown(b),ReactTestUtils.Simulate.mouseUp(b),throw_if_not_true([()=>"toukokuuta"===a.textContent]),ReactTestUtils.Simulate.mouseDown(b),ReactTestUtils.Simulate.mouseUp(b),throw_if_not_true([()=>"kes\xE4kuuta"===a.textContent]),ReactTestUtils.Simulate.mouseDown(b),ReactTestUtils.Simulate.mouseUp(b),throw_if_not_true([()=>"hein\xE4kuuta"===a.textContent]),ReactTestUtils.Simulate.mouseDown(b),ReactTestUtils.Simulate.mouseUp(b),throw_if_not_true([()=>"elokuuta"===a.textContent]),ReactTestUtils.Simulate.mouseDown(b),ReactTestUtils.Simulate.mouseUp(b),throw_if_not_true([()=>"syyskuuta"===a.textContent]),ReactTestUtils.Simulate.mouseDown(b),ReactTestUtils.Simulate.mouseUp(b),throw_if_not_true([()=>"lokakuuta"===a.textContent]),ReactTestUtils.Simulate.mouseDown(b),ReactTestUtils.Simulate.mouseUp(b),throw_if_not_true([()=>"marraskuuta"===a.textContent]),ReactTestUtils.Simulate.mouseDown(b),ReactTestUtils.Simulate.mouseUp(b),throw_if_not_true([()=>"joulukuuta"===a.textContent])}catch(a){if("assertion failure"===a)return!1;throw a}finally{a.remove()}try{a=document.createElement("div"),document.body.appendChild(a),ReactTestUtils.act(()=>{const b=React.createElement(ScrollerLabel,{type:"integer",value:1,min:0,max:2,onChange:()=>{}});ReactDOM.render(b,a)}),throw_if_not_true([()=>"1"===a.textContent]);const b=a.querySelector(".Scroller.up"),c=a.querySelector(".Scroller.down");throw_if_not_true([()=>b instanceof HTMLElement,()=>c instanceof HTMLElement]),ReactTestUtils.Simulate.mouseDown(b),ReactTestUtils.Simulate.mouseUp(b),throw_if_not_true([()=>"2"===a.textContent]),ReactTestUtils.Simulate.mouseDown(c),ReactTestUtils.Simulate.mouseUp(c),ReactTestUtils.Simulate.mouseDown(c),ReactTestUtils.Simulate.mouseUp(c),throw_if_not_true([()=>"0"===a.textContent]),ReactTestUtils.Simulate.mouseDown(c),ReactTestUtils.Simulate.mouseUp(c),throw_if_not_true([()=>"2"===a.textContent]),ReactTestUtils.Simulate.mouseDown(b),ReactTestUtils.Simulate.mouseUp(b),throw_if_not_true([()=>"0"===a.textContent])}catch(a){if("assertion failure"===a)return!1;throw a}finally{a.remove()}return!0};