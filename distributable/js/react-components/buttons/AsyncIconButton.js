"use strict";import{error,panic_if_not_type,is_function,throw_if_not_true}from"../../assert.js";export function AsyncIconButton(a={}){async function b(){"enabled"===i&&a.task&&(c("waiting"),await a.task({resetButtonState:(a="enabled")=>{c(a)}}))}function c(b){switch(panic_if_not_type("string",b),a.task||"enabled"!==b||(b="disabled"),b){case"enabled":{j("enabled"),e(a.icon),g(a.title);break}case"waiting":{j("waiting"),e(`fas fa-spinner fa-spin ${h}`.trim()),g(a.titleWhenClicked);break}case"disabled":{j("disabled"),e(a.icon),g(a.title);break}default:error("Unknown button state.");}}AsyncIconButton.validate_props(a);const[d,e]=React.useState(a.icon),[f,g]=React.useState(a.title),h=(()=>{const b=a.icon.match(/fa-([0-9]+x|xs|sm|lg)/g);return b?b.join(" "):""})(),[i,j]=React.useState(a.task&&a.enabled?"enabled":"disabled");return is_function(a.giveCallbackTriggerPress)&&a.giveCallbackTriggerPress(b),React.createElement("span",{className:`AsyncIconButton ${i}`,onClick:b,title:a.titleIsAlwaysVisible?"":f},React.createElement("i",{className:d}),a.titleIsAlwaysVisible?React.createElement(React.Fragment,null,React.createElement("br",null),f):React.createElement(React.Fragment,null))}AsyncIconButton.defaultProps={enabled:!0,title:null,titleWhenClicked:null,titleIsAlwaysVisible:!1,icon:"fas fa-question"},AsyncIconButton.validate_props=function(a){panic_if_not_type("object",a)},AsyncIconButton.test=()=>{let a={remove:()=>{}};try{a=document.createElement("div"),document.body.appendChild(a),ReactTestUtils.act(()=>{const b=React.createElement(AsyncIconButton,{icon:"fas fa-times",title:"Test1",titleIsAlwaysVisible:!0,titleWhenClicked:"Test1-Clicked",task:()=>{}});ReactDOM.unmountComponentAtNode(a),ReactDOM.render(b,a)}),throw_if_not_true([()=>"Test1"===a.textContent]);{throw_if_not_true([()=>1===a.childNodes.length]);const b=a.childNodes[0];throw_if_not_true([()=>"span"===b.tagName.toLowerCase(),()=>b.classList.contains("enabled"),()=>!b.classList.contains("waiting"),()=>!b.classList.contains("disabled")]),ReactTestUtils.Simulate.click(b),throw_if_not_true([()=>"Test1-Clicked"===a.textContent,()=>b.classList.contains("waiting"),()=>!b.classList.contains("enabled"),()=>!b.classList.contains("disabled")])}}catch(a){if("assertion failure"===a)return!1;throw a}finally{a.remove()}try{a=document.createElement("div"),document.body.appendChild(a),ReactTestUtils.act(()=>{const b=React.createElement(AsyncIconButton,{icon:"fas fa-times",enabled:!0});ReactDOM.unmountComponentAtNode(a),ReactDOM.render(b,a)}),throw_if_not_true([()=>1===a.childNodes.length]);const b=a.childNodes[0];throw_if_not_true([()=>b.classList.contains("disabled")]),ReactTestUtils.Simulate.click(b),throw_if_not_true([()=>b.classList.contains("disabled"),()=>!b.classList.contains("waiting"),()=>!b.classList.contains("enabled")])}catch(a){if("assertion failure"===a)return!1;throw a}finally{a.remove()}return!0};