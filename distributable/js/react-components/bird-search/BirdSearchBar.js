"use strict";import{panic_if_not_type,panic,throw_if_not_true}from"../../assert.js";export function BirdSearchBar(a={}){function b(b){e(b?"active":"inactive"),b&&f&&a.callbackOnChange(f)}BirdSearchBar.validateProps(a);const c=React.useRef(),[d,e]=React.useState(a.initialState),[f,g]=React.useState("");return React.useEffect(()=>{function a(a){const b=(()=>{let b=a.target;if(b&&"html"===b.tagName.toLowerCase())return!0;for(;b;){if(b.classList&&(b.classList.contains("BirdSearchResultsDisplay")||b.classList.contains("BirdSearchResult")||b.classList.contains("BirdSearchBar")))return!0;b=b.parentNode}return!1})();b||e("inactive")}return window.addEventListener("mousedown",a),()=>window.removeEventListener("mousedown",a)},[]),React.useEffect(()=>{switch(["active","inactive"].includes(d)||panic(`Invalid state value "${d}".`),d){case"inactive":{a.callbackOnInactivate();break}case"active":{a.callbackOnActivate();break}default:panic(`Unknown state "${d}".`);}},[d]),React.createElement("div",{className:"BirdSearchBar"},React.createElement("input",{className:`search-field ${d}`.trim(),ref:c,type:"search",onBlur:()=>{f.length||b(!1)},onFocus:()=>b(!0),onChange:function(b){const c=b.target.value.trim();g(c),a.callbackOnChange(c)},spellCheck:"false",placeholder:"Hae lajia",autoComplete:"off"}),React.createElement("i",{className:"icon fas fa-search"}))}BirdSearchBar.defaultProps={initialState:"inactive",callbackOnChange:()=>{},callbackOnActivate:()=>{},callbackOnInactivate:()=>{}},BirdSearchBar.validateProps=function(a){return panic_if_not_type("object",a),panic_if_not_type("string",a.initialState),panic_if_not_type("function",a.callbackOnChange,a.callbackOnActivate,a.callbackOnInactivate),void(["active","inactive"].includes(a.initialState)||panic(`Invalid state value "${a.initialState}".`))},BirdSearchBar.test=()=>{let a={remove:()=>{}};try{a=document.createElement("div"),document.body.appendChild(a);let b="nothing";ReactTestUtils.act(()=>{const c=React.createElement(BirdSearchBar,{callbackOnChange:a=>{b=a}});ReactDOM.unmountComponentAtNode(a),ReactDOM.render(c,a)});{const c=a.querySelector("input");throw_if_not_true([()=>null!==c]),c.value="blub blab",ReactTestUtils.Simulate.change(c),throw_if_not_true([()=>b===c.value]),c.value="",ReactTestUtils.Simulate.change(c),throw_if_not_true([()=>0===b.length])}}catch(a){if("assertion failure"===a)return!1;throw a}finally{a.remove()}return!0};