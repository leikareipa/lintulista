"use strict";import{panic_if_not_type,throw_if_not_true}from"../../assert.js";import{BirdSearchResult}from"./BirdSearchResult.js";import{BirdSearchBar}from"./BirdSearchBar.js";import{Observation}from"../../observation.js";import{Bird}from"../../bird.js";export function BirdSearch(a={}){async function b(b){panic_if_not_type("object",b),await a.callbackAddObservation(b),e()}async function c(b){panic_if_not_type("object",b),e(),await a.callbackRemoveObservation(b)}async function d(b){e(),await a.callbackChangeObservationDate(b)}function e(){g(!1)}BirdSearch.validate_props(a);const[f,g]=React.useState(!1);return React.createElement("div",{className:"BirdSearch"},React.createElement(BirdSearchBar,{initialState:"inactive",callbackOnChange:function(h){function i(a){f&&a.species===f.bird.species||g({bird:a,element:j(a)})}function j(e){const f=a.backend.observations().find(a=>a.bird.species===e.species);return React.createElement(BirdSearchResult,{key:e.species,bird:e,observation:f?f:null,userHasEditRights:a.backend.hasEditRights,callbackAddObservation:b,callbackRemoveObservation:c,callbackChangeObservationDate:d})}return h=h.trim(),h.length?void(b=>b?void i(b):void(a=>{if(a)return void i(a)})(a.backend.known_birds().find(a=>a.species.toLowerCase().includes(h.toLowerCase()))))(a.backend.known_birds().find(a=>a.species.toLowerCase()===h.toLowerCase())):void e()},callbackOnInactivate:e}),React.createElement("div",{className:`BirdSearchResultsDisplay ${f?"active":"inactive"}
                                                         ${a.backend.hasEditRights?"edit-rights":"no-edit-rights"}`.trim()},f?f.element:React.createElement(React.Fragment,null)))}BirdSearch.defaultProps={maxNumResultElements:1},BirdSearch.validate_props=function(a){return panic_if_not_type("object",a,a.backend),void panic_if_not_type("function",a.callbackAddObservation)},BirdSearch.test=()=>{let a={remove:()=>{}};try{a=document.createElement("div"),document.body.appendChild(a);const b={known_birds:()=>[Bird({species:"Alli",family:"",order:""}),Bird({species:"Naakka",family:"",order:""})],observations:()=>[Observation({bird:Bird({species:"Naakka",family:"",order:""}),date:new Date(1e3)})]};ReactTestUtils.act(()=>{const c=React.createElement(BirdSearch,{backend:b,callbackAddObservation:()=>{},callbackRemoveObservation:()=>{},callbackChangeObservationDate:()=>{}});ReactDOM.unmountComponentAtNode(a),ReactDOM.render(c,a)});const c=a.querySelector(".BirdSearch"),d=a.querySelector(".BirdSearchBar"),e=a.querySelector(".BirdSearchResultsDisplay"),f=d.querySelector("input");throw_if_not_true([()=>null!==c,()=>null!==d,()=>null!==e,()=>null!==f]),ReactTestUtils.Simulate.focus(f),f.value="alli",ReactTestUtils.Simulate.change(f),throw_if_not_true([()=>1===e.childNodes.length,()=>"BirdSearchResult not-previously-observed"===e.childNodes[0].getAttribute("class")]),f.value="naakka",ReactTestUtils.Simulate.change(f),throw_if_not_true([()=>1===e.childNodes.length,()=>"BirdSearchResult"===e.childNodes[0].getAttribute("class")]),f.value="naakka",ReactTestUtils.Simulate.change(f),throw_if_not_true([()=>1===e.childNodes.length]),f.value="",ReactTestUtils.Simulate.change(f),throw_if_not_true([()=>0===e.childNodes.length])}catch(a){if("assertion failure"===a)return!1;throw a}finally{a.remove()}return!0};