"use strict";import{panic_if_undefined,panic,panic_if_not_type}from"../../assert.js";import{QueryObservationDeletion}from"../dialogs/QueryObservationDeletion.js";import{ObservationListFootnotes}from"./ObservationListFootnotes.js";import{ObservationListMenuBar}from"./ObservationListMenuBar.js";import{QueryObservationDate}from"../dialogs/QueryObservationDate.js";import{open_modal_dialog}from"../../open-modal-dialog.js";import{ObservationCard}from"./ObservationCard.js";import{Observation}from"../../observation.js";import*as FileSaver from"../../filesaver/FileSaver.js";const sataLajia=Object.freeze(["Alli","Fasaani","Haahka","Haapana","Haarap\xE4\xE4sky","Harakka","H\xE4rk\xE4lintu","Harmaahaikara","Harmaalokki","Harmaap\xE4\xE4tikka","Harmaasieppo","Helmip\xF6ll\xF6","Hemppo","Hernekerttu","Hiirihaukka","Hiirip\xF6ll\xF6","Hippi\xE4inen","H\xF6m\xF6tiainen","Huuhkaja","Isokoskelo","Isolepink\xE4inen","J\xE4rripeippo","Jouhisorsa","K\xE4enpiika","K\xE4ki","Kalalokki","Kalatiira","Kanadanhanhi","Kanahaukka","Kapustarinta","K\xE4pytikka","Kaulushaikara","Kehr\xE4\xE4j\xE4","Keltasirkku","Keltav\xE4st\xE4r\xE4kki","Kesykyyhky","Kirjosieppo","Kiuru","Kivitasku","Korppi","Koskikara","Kottarainen","Kuikka","Kultarinta","Kuovi","Kurki","Kuukkeli","Kuusitiainen","Kyhmyjoutsen","Lapasorsa","Lapintiainen","Lapintiira","Laulujoutsen","Laulurastas","Lehtokerttu","Lehtokurppa","Lehtop\xF6ll\xF6","Lepp\xE4lintu","Liro","Luhtakerttunen","Merihanhi","Merikotka","Merilokki","Merimetso","Mets\xE4hanhi","Mets\xE4kirvinen","Metso","Mustalintu","Mustap\xE4\xE4kerttu","Mustarastas","Naakka","N\xE4rhi","Naurulokki","Niittykirvinen","Nokikana","Nuolihaukka","Pajulintu","Pajusirkku","Palok\xE4rki","Peippo","Peltosirkku","Pensaskerttu","Pensassirkkalintu","Pensastasku","Peukaloinen","Piekana","Pikkuk\xE4pylintu","Pikkulepink\xE4inen","Pikkulokki","Pikkutikka","Pikkuvarpunen","Pilkkasiipi","Pulmunen","Punakylkirastas","Punarinta","Punatulkku","Punavarpunen","Puukiipij\xE4","Pyrst\xF6tiainen","Pyy","R\xE4k\xE4ttirastas","Rantasipi","Rautiainen","R\xE4ysk\xE4","R\xE4yst\xE4sp\xE4\xE4sky","Riekko","Ruisr\xE4\xE4kk\xE4","Ruokokerttunen","Ruskosuohaukka","Rytikerttunen","S\xE4\xE4ksi","Sarvip\xF6ll\xF6","Satakieli","Selk\xE4lokki","Sepelkyyhky","Silkkiuikku","Sinirinta","Sinisorsa","Sinisuohaukka","Sinitiainen","Siritt\xE4j\xE4","Suokukko","Taivaanvuohi","Talitiainen","Tavi","Teeri","Telkk\xE4","Tervap\xE4\xE4sky","Tikli","Tilhi","Tiltaltti","T\xF6rm\xE4p\xE4\xE4sky","T\xF6yht\xF6hyypp\xE4","T\xF6yht\xF6tiainen","Tukkakoskelo","Tukkasotka","Tundrahanhi","Tuulihaukka","Urpiainen","Uuttukyyhky","Valkoposkihanhi","Varis","Varpunen","Varpushaukka","Varpusp\xF6ll\xF6","V\xE4st\xE4r\xE4kki","Viherpeippo","Vihervarpunen","Viirup\xF6ll\xF6","Viitakerttunen"]);export function ObservationList(a={}){function b(){m.cards++,h(g+1)}function c(){if("sata-lajia"===k){const b=sataLajia.reduce((b,c)=>{const f=a.backend.observations().find(a=>a.bird.species===c);return b.push(f?e(f):d(c)),b},[]),c=a.backend.observations().filter(a=>!sataLajia.includes(a.bird.species)).map(a=>e(a));return[...b,...c]}return a.backend.observations().map(a=>e(a))}function d(b){panic_if_not_type("string",b);const c=a.backend.known_birds().find(a=>a.species===b);if(!c)return panic(`Unknown species '${b}'.`),{};const d=Observation({bird:c,date:new Date});return{observation:d,element:React.createElement(ObservationCard,{observation:d,isGhost:!0,key:d.bird.species})}}function e(a){return panic_if_not_type("object",a),{observation:a,element:React.createElement(ObservationCard,{observation:a,key:a.bird.species})}}function f(){const a=(()=>"sata-lajia"===k?o.species:"date"===k||"species"===k?o[k]:(panic("Unknown sorter."),()=>{}))();n.sort(a)}ObservationList.validate_props(a);const[g,h]=React.useState(0),[i,j]=React.useState(!0),[k,l]=React.useState(a.backend.observations().length?"date":"sata-lajia"),[m]=React.useState(()=>({total:0,elements:0,isInitialRender:!0}));m.total++;const[n]=React.useState(()=>c()),o={species:(c,a)=>c.observation.bird.species<a.observation.bird.species?-1:c.observation.bird.species>a.observation.bird.species?1:0,family:(c,a)=>c.observation.bird.family<a.observation.bird.family?-1:c.observation.bird.family>a.observation.bird.family?1:0,order:(c,a)=>c.observation.bird.order<a.observation.bird.order?-1:c.observation.bird.order>a.observation.bird.order?1:0,date:(c,a)=>c.observation.unixTimestamp<a.observation.unixTimestamp?1:c.observation.unixTimestamp>a.observation.unixTimestamp?-1:0};React.useEffect(()=>{1<m.total&&(n.splice(0,n.length,...c()),f(),b()),m.isInitialRender=!1},[k]);const p=Object.freeze({add_observation:async function(c){const d=Observation({bird:c,date:new Date});if(await a.backend.put_observation(d)){const a=n.map(a=>a.observation.bird.species).findIndex(a=>a===d.bird.species);-1===a?n.unshift(e(d)):n.splice(a,1,e(d)),f(),b()}else error(`Could not add an observation for ${c.species}.`)},delete_observation:async function(c){const e=n.map(a=>a.observation).find(a=>a.bird.species===c.species);return e?void(j(!1),await open_modal_dialog(QueryObservationDeletion,{observation:e,onAccept:async()=>{const g=n.map(a=>a.observation.bird.species).findIndex(a=>a===e.bird.species);if(-1!==g&&(await a.backend.delete_observation(e))){const a=n[g].observation.bird.species;"sata-lajia"===k&&sataLajia.includes(a)?n.splice(g,1,d(a)):n.splice(g,1),f(),b()}else error(`Could not delete the observation of ${c.species}.`)},onClose:()=>{j(!0)}})):void panic("Was asked to delete an observation of a species of which no observation exists.")},set_observation_date:async function(c){panic_if_not_type("object",c);const d=n.map(a=>a.observation).find(a=>a.bird.species===c.species);return d?void(j(!1),await open_modal_dialog(QueryObservationDate,{observation:d,onAccept:async({year:g,month:h,day:i})=>{const j=new Date;j.setFullYear(g),j.setMonth(h-1),j.setDate(i);const l=Observation({...d,date:j});if(!(await a.backend.put_observation(l)))return null;const m=n.map(a=>a.observation).findIndex(a=>a.bird.species===c.species);-1===m&&panic("Unable to find the observation card whose date was modified."),n.splice(m,1,e(l)),"date"===k&&(f(),b())},onClose:()=>{j(!0)}})):void panic("Was asked to set the date of an observation of a species of which no observation exists.")}});return React.createElement("div",{className:"ObservationList"},React.createElement(ObservationListMenuBar,{enabled:i,backend:a.backend,callbackAddObservation:p.add_observation,callbackRemoveObservation:p.delete_observation,callbackChangeObservationDate:p.set_observation_date,callbackSetListSorting:l}),React.createElement("div",{className:`observation-cards ${k}`.trim(),key:g},n.map(a=>a.element)),React.createElement(ObservationListFootnotes,{numObservationsInList:a.backend.observations().length,callbackDownloadList:function(){let b="Ensihavainto, Laji, Heimo, Lahko\n";a.backend.observations().forEach(a=>{const c=new Intl.DateTimeFormat("fi-FI").format(a.date);b+=`${c||""}, ${a.bird.species||""}, ${a.bird.family||""}, ${a.bird.order||""},\n`}),saveAs(new Blob([b],{type:"text/plain;charset=utf-8"}),"lintulista.csv")}}))}ObservationList.validate_props=function(a){panic_if_undefined(a.backend)};